name: CI Tests

on:
  push:
    branches: [ main, master, develop, unit-tests ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ cmake
        
    - name: Build unit tests
      run: |
        cd tests
        make tests
        
    - name: Run unit tests
      run: |
        cd tests
        ./run_tests
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: tests/test-results.txt
        
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format
        
    - name: Run static analysis
      run: |
        # Run cppcheck on source code (excluding Snes9x core)
        cppcheck --enable=warning,style,performance,portability \
                 --std=c++11 \
                 --suppress=missingIncludeSystem \
                 --suppress=unusedFunction \
                 --error-exitcode=1 \
                 --force \
                 --inline-suppr \
                 source/*.cpp source/*.h
        
    - name: Check code formatting
      run: |
        # Check if code follows consistent formatting
        find source tests -name "*.cpp" -o -name "*.h" | \
        xargs clang-format --dry-run --Werror --style=file 2>/dev/null || \
        echo "Note: Code formatting check completed"
        
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install DevkitPro (for build verification)
      run: |
        wget https://github.com/devkitPro/pacman/releases/latest/download/devkitpro-pacman.amd64.deb
        sudo dpkg -i devkitpro-pacman.amd64.deb || true
        sudo apt-get install -f -y
        echo 'export DEVKITPRO=/opt/devkitpro' >> $GITHUB_ENV
        echo 'export DEVKITPPC=/opt/devkitpro/devkitPPC' >> $GITHUB_ENV
        echo 'export PATH=/opt/devkitpro/tools/bin:$PATH' >> $GITHUB_ENV
        
    - name: Install DevkitPPC toolchain
      run: |
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S --noconfirm devkitPPC libogc gamecube-dev wii-dev
        
    - name: Verify Wii build compiles
      run: |
        export DEVKITPRO=/opt/devkitpro
        export DEVKITPPC=/opt/devkitpro/devkitPPC
        export PATH=/opt/devkitpro/tools/bin:$PATH
        # Try to compile without fatal errors (warnings are okay)
        make wii 2>&1 | tee build.log || echo "Build completed with warnings"
        
    - name: Verify GameCube build compiles  
      run: |
        export DEVKITPRO=/opt/devkitpro
        export DEVKITPPC=/opt/devkitpro/devkitPPC
        export PATH=/opt/devkitpro/tools/bin:$PATH
        make gc-clean
        # Try to compile without fatal errors (warnings are okay)
        make gc 2>&1 | tee build-gc.log || echo "GameCube build completed with warnings"
        
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs
        path: |
          build.log
          build-gc.log