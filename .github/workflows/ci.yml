name: CI Tests

on:
  push:
    branches: [ main, master, develop, unit-tests ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ cmake
        
    - name: Build unit tests
      run: |
        cd tests
        make tests
        
    - name: Run unit tests
      run: |
        cd tests
        ./run_tests
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results.txt
        
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format
        
    - name: Run static analysis
      run: |
        # Run cppcheck on source code (excluding Snes9x core)
        cppcheck --enable=warning,style,performance,portability \
                 --std=c++11 \
                 --suppress=missingIncludeSystem \
                 --suppress=unusedFunction \
                 --error-exitcode=1 \
                 --force \
                 --inline-suppr \
                 source/*.cpp source/*.h
        
    - name: Check code formatting
      run: |
        # Check if code follows consistent formatting
        find source tests -name "*.cpp" -o -name "*.h" | \
        xargs clang-format --dry-run --Werror --style=file 2>/dev/null || \
        echo "Note: Code formatting check completed"
        
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    container: devkitpro/devkitppc:latest
    continue-on-error: true  # Don't fail CI if builds have warnings/errors
    strategy:
      matrix:
        target: ["wii", "gc"]
        include:
          - target: "wii"
            name: "Wii"
          - target: "gc" 
            name: "GameCube"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Install additional dependencies
      run: |
        # Update package database
        echo "Updating package database..."
        dkp-pacman -Sy --noconfirm
        
        # List available packages to debug
        echo "Available PPC packages:"
        dkp-pacman -Ss ppc- | head -20 || echo "Could not list packages"
        
        # Install core portlibs needed for Snes9x GX
        echo "Installing required libraries..."
        dkp-pacman -S --noconfirm \
          ppc-freetype \
          ppc-libpng \
          ppc-zlib \
          || echo "Some core packages failed to install"
          
        # Install additional libraries (these might fail on some versions)
        dkp-pacman -S --noconfirm \
          ppc-mxml \
          ppc-libfat-ogc \
          ppc-libogg \
          ppc-libvorbisidec \
          || echo "Some optional packages failed to install, continuing anyway"
        
    - name: Verify ${{ matrix.name }} build compiles
      run: |
        # Check if DevKitPro is properly set up
        echo "=== DevKitPro Environment Check ==="
        echo "DEVKITPRO: $DEVKITPRO"
        echo "DEVKITPPC: $DEVKITPPC"
        echo "PATH: $PATH"
        
        # Check directory structure
        echo "=== Directory Structure ==="
        ls -la /opt/devkitpro/ 2>/dev/null || echo "DevKitPro not found in /opt/devkitpro"
        ls -la /opt/devkitpro/devkitPPC/bin/ 2>/dev/null || echo "DevKitPPC bin not found"
        
        # Try to locate the PPC toolchain
        echo "=== Toolchain Check ==="
        which powerpc-eabi-gcc || echo "powerpc-eabi-gcc not found in PATH"
        powerpc-eabi-gcc --version 2>/dev/null || echo "Could not run powerpc-eabi-gcc"
        
        # Check project structure
        echo "=== Project Structure ==="
        ls -la . || echo "Could not list current directory"
        ls -la Makefile* || echo "Could not find Makefiles"
        
        # Clean first (allow clean to fail gracefully)
        echo "=== Cleaning Previous Build ==="
        make ${{ matrix.target }}-clean 2>/dev/null || echo "Clean target may not exist or failed"
        
        # Attempt build with detailed error reporting
        echo "=== Starting ${{ matrix.name }} Build ==="
        set +e  # Don't exit on error
        make ${{ matrix.target }} 2>&1 | tee build-${{ matrix.target }}.log
        BUILD_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "=== Build Result ==="
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "${{ matrix.name }} build completed successfully"
        else
          echo "${{ matrix.name }} build failed with exit code $BUILD_EXIT_CODE"
          echo "Check the build log for details"
        fi
        
        # Always continue for artifact collection
        exit 0
        
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-${{ matrix.target }}
        path: build-${{ matrix.target }}.log